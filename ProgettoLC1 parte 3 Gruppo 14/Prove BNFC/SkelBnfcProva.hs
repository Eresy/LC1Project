module SkelBnfcProva where

-- Haskell module generated by the BNF converter

import AbsBnfcProva
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transS :: S -> Result
transS x = case x of
transTopStatements :: TopStatements -> Result
transTopStatements x = case x of
transTopStatement :: TopStatement -> Result
transTopStatement x = case x of
transStatements :: Statements -> Result
transStatements x = case x of
transStatement :: Statement -> Result
transStatement x = case x of
transAssignment :: Assignment -> Result
transAssignment x = case x of
transDefinition :: Definition -> Result
transDefinition x = case x of
  Def typelabel lvalue -> failure x
  Def2 typelabel assignment -> failure x
  Def3 functiondef -> failure x
transFunctionDef :: FunctionDef -> Result
transFunctionDef x = case x of
  FDef typelabel label arguments instructions -> failure x
transLValue :: LValue -> Result
transLValue x = case x of
  Lval label -> failure x
  Lval2 label array -> failure x
  Lval3 pointer array -> failure x
transRValue :: RValue -> Result
transRValue x = case x of
  Rval lvalue -> failure x
  Rval2 type_ -> failure x
  Rval3 assignment -> failure x
  Rval4 functioncall -> failure x
  Rval5 arraydef -> failure x
  Rval6 expression -> failure x
transType :: Type -> Result
transType x = case x of
transBool :: Bool -> Result
transBool x = case x of
transTypeLabel :: TypeLabel -> Result
transTypeLabel x = case x of
transInstructions :: Instructions -> Result
transInstructions x = case x of
transInstruction :: Instruction -> Result
transInstruction x = case x of
transFunctionCall :: FunctionCall -> Result
transFunctionCall x = case x of
transParameters :: Parameters -> Result
transParameters x = case x of
transArguments :: Arguments -> Result
transArguments x = case x of
transFlowControl :: FlowControl -> Result
transFlowControl x = case x of
transIfThenElse :: IfThenElse -> Result
transIfThenElse x = case x of
transThen :: Then -> Result
transThen x = case x of
transElse :: Else -> Result
transElse x = case x of
transWhile :: While -> Result
transWhile x = case x of
transFor :: For -> Result
transFor x = case x of
transForInd :: ForInd -> Result
transForInd x = case x of
transForVars :: ForVars -> Result
transForVars x = case x of
transForVar :: ForVar -> Result
transForVar x = case x of
transLabel :: Label -> Result
transLabel x = case x of
transArray :: Array -> Result
transArray x = case x of
transArrayDef :: ArrayDef -> Result
transArrayDef x = case x of
  Adef arrayitems -> failure x
transArrayItems :: ArrayItems -> Result
transArrayItems x = case x of
  Aitm rvalue -> failure x
  Aitm2 rvalue arrayitems -> failure x
transPointer :: Pointer -> Result
transPointer x = case x of
transExpression :: Expression -> Result
transExpression x = case x of
transOperand :: Operand -> Result
transOperand x = case x of
transOperator :: Operator -> Result
transOperator x = case x of

