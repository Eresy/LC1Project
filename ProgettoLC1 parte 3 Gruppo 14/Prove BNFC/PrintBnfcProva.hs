{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintBnfcProva where

-- pretty-printer generated by the BNF converter

import AbsBnfcProva
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print S where
  prt i e = case e of

instance Print Statements where
  prt i e = case e of

instance Print Statement where
  prt i e = case e of

instance Print Assignment where
  prt i e = case e of

instance Print FunctionDef where
  prt i e = case e of
    FDef type_ label arguments instructions -> prPrec i 0 (concatD [prt 0 type_, prt 0 label, doc (showString "("), prt 0 arguments, doc (showString ")"), doc (showString "{"), prt 0 instructions, doc (showString "}")])

instance Print Definition where
  prt i e = case e of
    Def type_ lvalue -> prPrec i 0 (concatD [prt 0 type_, prt 0 lvalue, doc (showString ";")])
    Def2 type_ assignment -> prPrec i 0 (concatD [prt 0 type_, prt 0 assignment])
    Def3 functiondef -> prPrec i 0 (concatD [prt 0 functiondef])

instance Print LValue where
  prt i e = case e of
    Lval label -> prPrec i 0 (concatD [prt 0 label])
    Lval2 label array -> prPrec i 0 (concatD [prt 0 label, prt 0 array])
    Lval3 pointer array -> prPrec i 0 (concatD [prt 0 pointer, prt 0 array])

instance Print RValue where
  prt i e = case e of
    Rval lvalue -> prPrec i 0 (concatD [prt 0 lvalue])
    Rval2 type_ -> prPrec i 0 (concatD [prt 0 type_])
    Rval3 assignment -> prPrec i 0 (concatD [prt 0 assignment])
    Rval4 functioncall -> prPrec i 0 (concatD [prt 0 functioncall])
    Rval5 arraydef -> prPrec i 0 (concatD [prt 0 arraydef])
    Rval6 expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print Type where
  prt i e = case e of

instance Print Bool where
  prt i e = case e of

instance Print Instructions where
  prt i e = case e of

instance Print Instruction where
  prt i e = case e of

instance Print FunctionCall where
  prt i e = case e of

instance Print Parameters where
  prt i e = case e of

instance Print Arguments where
  prt i e = case e of

instance Print FlowControl where
  prt i e = case e of

instance Print IfThenElse where
  prt i e = case e of

instance Print Then where
  prt i e = case e of

instance Print Else where
  prt i e = case e of

instance Print While where
  prt i e = case e of

instance Print For where
  prt i e = case e of

instance Print ForInd where
  prt i e = case e of

instance Print ForVars where
  prt i e = case e of

instance Print ForVar where
  prt i e = case e of

instance Print Label where
  prt i e = case e of

instance Print Array where
  prt i e = case e of

instance Print ArrayDef where
  prt i e = case e of
    Adef arrayitems -> prPrec i 0 (concatD [doc (showString "{"), prt 0 arrayitems, doc (showString "}")])

instance Print ArrayItems where
  prt i e = case e of
    Aitm rvalue -> prPrec i 0 (concatD [prt 0 rvalue])
    Aitm2 rvalue arrayitems -> prPrec i 0 (concatD [prt 0 rvalue, doc (showString ","), prt 0 arrayitems])

instance Print Pointer where
  prt i e = case e of

instance Print Expression where
  prt i e = case e of

instance Print Operand where
  prt i e = case e of

instance Print Operator where
  prt i e = case e of


