Init.	S ::= [TopStatement] ;

terminator TopStatement "" ;
Tstat.	TopStatement ::= Definition ;

terminator Statement "" ;
Stat.	Statement ::= Assignment ;
Stat2.	Statement ::= Definition  ;
Stat3.	Statement ::= FunctionCall ;

Assign.	Assignment ::= LValue "=" RValue ";" ;

Def.	Definition ::= TypeLabel LValue ";" ;
Def2.	Definition ::= TypeLabel Assignment ;
Def3.	Definition ::= FunctionDef ;
FDef.	FunctionDef ::= TypeLabel Label "(" [Argument] ")" "{" [Instruction] "}" ;
PDef.	FunctionDef ::= "void" Label "(" [Argument] ")" "{" [Instruction] "}" ;
 	
Lval.	LValue ::= Label ;
Lval2.	LValue ::= Label Array;
Lval3.	LValue ::= Pointer Array ;

Rval.	RValue ::= LValue ;
Rval2.	RValue ::= Expression ;
Rval3.	RValue ::= Assignment ;
Rval4.	RValue ::= FunctionCall ;
Rval5.	RValue ::= ArrayDef ;

Type1.	Type ::= Integer ;
Type2.	Type ::= Char ;
Type3.	Type ::= String ;
Type4.	Type ::= "True" ;
Type5.	Type ::= "False" ;
Type6.	Type ::= Double ;

Typel.	TypeLabel ::= "int";
Typel2.	TypeLabel ::= "char";
Typel3.	TypeLabel ::= "double";
Typel4.	TypeLabel ::= "String";

PredF.	PredFunction ::= "readInt()" ;
PredF2.	PredFunction ::= "writeInt(" Parameter ")";
PredF3.	PredFunction ::= "readFloat()" ;
PredF4.	PredFunction ::= "writeFloat()";
PredF5.	PredFunction ::= "readChar()" ;
PredF6.	PredFunction ::= "writeChar()";
PredF7.	PredFunction ::= "readString()" ;
PredF8.	PredFunction ::= "writeString()";

terminator Instruction "" ;
Instr.	Instruction ::= Statement ;
Instr2.	Instruction ::= FlowControl ;

Fcall.	FunctionCall ::= Label "(" [Parameter] ")" ";" ;
Fcall2.	FunctionCall ::= PredFunction ";" ;
separator Parameter "," ;
Parm.	Parameter ::= RValue ;

separator Argument "," ;
Args.	Argument ::= PassingType TypeLabel Label ;
PassT.	PassingType ::= ;
PassT2.	PassingType ::= "valres";

Fctrl.	FlowControl ::= IfThenElse ;
Fctrl2.	FlowControl ::= While ;
Fctrl3.	FlowControl ::= For ;
Fctrl4.	FlowControl ::= "return" ";";

separator FlowStatement "" ;
Fstmt.	FlowStatement ::= "break" ";" ;
Fstmt2.	FlowStatement ::= "continue" ";" ;
Fstmt3.	FlowStatement ::= Statement;

If.		IfThenElse ::= "if" "(" Expression ")" Then ;
If2.	IfThenElse ::= "if" "(" Expression ")" Then Else ;
ThenS.	Then ::= "{" [Statement] "}" ;
ElseS.	Else ::= "else" Then ;
WhileS.	While ::= "while" "(" Expression ")" "{" [FlowStatement] "}" ;
ForS.	For ::= "for" "(" ForInd ";" ForExpression ";" ForExpression ")" "{" [FlowStatement] "}" ;
Forind.	ForInd ::= ForVars ;
Forind2.	ForInd ::= ;
Forvar.	ForVars ::= ForVar "," ForVars ;
Forvar2.	ForVars ::= ForVar ;
Forvar3.	ForVar ::=  Assignment;
ForExp.	ForExpression ::= Expression ;
ForExp2.	ForExpression ::= ;

Lbl.	Label ::= Ident ;
Arr.	Array ::= "[" Integer "]" ;
Adef.	ArrayDef ::= "{" [ArrayItem] "}" ;
(:).	[ArrayItem] ::= ArrayItem "," [ArrayItem] ;
Aitm2.	ArrayItem ::= RValue ;
Ptr.	Pointer ::= "*";






Expr.	Expression ::= Operand  ;
Expr2.	Expression ::= UnaryOperator Operand ;
Expr3.	Expression ::= Operand BinaryOperator Expression;
Oper.	Operand ::= Type ;
Oper2.	Operand ::= Label ;
Sum.	BinaryOperator ::= "+" ;
Diff.	BinaryOperator ::= "-" ;
Div.	BinaryOperator ::= "/" ;
Mul.	BinaryOperator ::= "*" ;
Comp.	BinaryOperator ::= "==" ;
Andbw.	BinaryOperator ::= "&" ;
Orbw.	BinaryOperator ::= "|" ;
And.	BinaryOperator ::= "&&" ;
Or.		BinaryOperator ::= "||" ;
Not.	UnaryOperator ::= "!" ;
Inc.	UnaryOperator ::= "++" ;
Dec.	UnaryOperator ::= "--" ;
coercions Expression 3;


comment "//" ;
comment "/*" "*/" ;
