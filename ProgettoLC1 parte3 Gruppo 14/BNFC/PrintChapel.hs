{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintChapel where

-- pretty-printer generated by the BNF converter

import AbsChapel
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print S where
  prt i e = case e of
    Init program -> prPrec i 0 (concatD [prt 0 program])

instance Print Program where
  prt i e = case e of
    Prgrm statements -> prPrec i 0 (concatD [prt 0 statements])

instance Print Statement where
  prt i e = case e of
    Stmt1 blockstatement -> prPrec i 0 (concatD [prt 0 blockstatement])
    Stmt2 expression -> prPrec i 0 (concatD [prt 0 expression, doc (showString ";")])
    Stmt4 assignment -> prPrec i 0 (concatD [prt 0 assignment])
    Stmt5 declaration -> prPrec i 0 (concatD [prt 0 declaration, doc (showString ";")])
    Stmt6 funcdeclaration -> prPrec i 0 (concatD [prt 0 funcdeclaration])
    Stmt7 whiledo -> prPrec i 0 (concatD [prt 0 whiledo])
    Stmt8 dowhile -> prPrec i 0 (concatD [prt 0 dowhile])
    Stmt9 for -> prPrec i 0 (concatD [prt 0 for])
    Stmt11 if_ -> prPrec i 0 (concatD [prt 0 if_])
    Stmt12 trycatch -> prPrec i 0 (concatD [prt 0 trycatch])
    Stmt13 -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    Stmt14 -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    Stmt15 expression -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expression, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print BlockStatement where
  prt i e = case e of
    Bstmt statements -> prPrec i 0 (concatD [doc (showString "{"), prt 0 statements, doc (showString "}")])

instance Print FunctionCall where
  prt i e = case e of
    Fcall1 label parameterlist -> prPrec i 0 (concatD [prt 0 label, prt 0 parameterlist])

instance Print FuncDeclaration where
  prt i e = case e of
    Fdec1 label parameterdecl cast blockstatement -> prPrec i 0 (concatD [doc (showString "proc"), prt 0 label, prt 0 parameterdecl, prt 0 cast, prt 0 blockstatement])
    Fdec2 label parameterdecl blockstatement -> prPrec i 0 (concatD [doc (showString "proc"), prt 0 label, prt 0 parameterdecl, prt 0 blockstatement])
    Fdec3 label cast blockstatement -> prPrec i 0 (concatD [doc (showString "proc"), prt 0 label, prt 0 cast, prt 0 blockstatement])
    Fdec4 label blockstatement -> prPrec i 0 (concatD [doc (showString "proc"), prt 0 label, prt 0 blockstatement])

instance Print ParameterDecl where
  prt i e = case e of
    ParDec parameters -> prPrec i 0 (concatD [doc (showString "("), prt 0 parameters, doc (showString ")")])

instance Print Parameter where
  prt i e = case e of
    Par mode label cast -> prPrec i 0 (concatD [prt 0 mode, prt 0 label, prt 0 cast])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print ParameterList where
  prt i e = case e of
    ParLst expressions -> prPrec i 0 (concatD [doc (showString "("), prt 0 expressions, doc (showString ")")])

instance Print Mode where
  prt i e = case e of
    Mode1 -> prPrec i 0 (concatD [doc (showString "val")])
    Mode2 -> prPrec i 0 (concatD [doc (showString "ref")])
    Mode3 -> prPrec i 0 (concatD [doc (showString "const")])
    Mode4 -> prPrec i 0 (concatD [])

instance Print Declaration where
  prt i e = case e of
    Decl1 pointers label cast -> prPrec i 0 (concatD [doc (showString "var"), prt 0 pointers, prt 0 label, prt 0 cast])

instance Print Assignment where
  prt i e = case e of
    Asgmt1 label rvalue -> prPrec i 0 (concatD [prt 0 label, doc (showString "="), prt 0 rvalue, doc (showString ";")])
    Asgmt2 pointers label rvalue -> prPrec i 0 (concatD [doc (showString "var"), prt 0 pointers, prt 0 label, doc (showString "="), prt 0 rvalue, doc (showString ";")])
    Asgmt3 declaration rvalue -> prPrec i 0 (concatD [prt 0 declaration, doc (showString "="), prt 0 rvalue, doc (showString ";")])

instance Print Range where
  prt i e = case e of
    Rng1 expression1 expression2 -> prPrec i 0 (concatD [prt 0 expression1, doc (showString ".."), prt 0 expression2])
    Rng2 expression -> prPrec i 0 (concatD [prt 0 expression, doc (showString "..")])
    Rng3 expression -> prPrec i 0 (concatD [doc (showString ".."), prt 0 expression])
    Rng4 -> prPrec i 0 (concatD [doc (showString "..")])

instance Print Cast where
  prt i e = case e of
    Cast1 typespec -> prPrec i 0 (concatD [doc (showString ":"), prt 0 typespec])
    Cast2 range typespec -> prPrec i 0 (concatD [doc (showString ":"), doc (showString "["), prt 0 range, doc (showString "]"), prt 0 typespec])

instance Print Pointer where
  prt i e = case e of
    Ptr -> prPrec i 0 (concatD [doc (showString "*")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print LValue where
  prt i e = case e of
    Lval1 label -> prPrec i 0 (concatD [prt 0 label])
    Lval2 label arrayindexs -> prPrec i 0 (concatD [prt 0 label, prt 0 arrayindexs])

instance Print RValue where
  prt i e = case e of
    Rval1 expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print ArrayIndex where
  prt i e = case e of
    Arr1 expression -> prPrec i 0 (concatD [doc (showString "["), prt 0 expression, doc (showString "]")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ArrayElement where
  prt i e = case e of
    Arrel literallists -> prPrec i 0 (concatD [doc (showString "("), prt 0 literallists, doc (showString ")")])

instance Print LiteralList where
  prt i e = case e of
    Arrlst value -> prPrec i 0 (concatD [prt 0 value])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print WhileDo where
  prt i e = case e of
    Wd expression blockstatement -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expression, prt 0 blockstatement])

instance Print DoWhile where
  prt i e = case e of
    Dw blockstatement expression -> prPrec i 0 (concatD [doc (showString "do"), prt 0 blockstatement, doc (showString "while"), prt 0 expression, doc (showString ";")])

instance Print If where
  prt i e = case e of
    If1 expression blockstatement -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expression, prt 0 blockstatement])
    If2 expression blockstatement1 blockstatement2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expression, prt 0 blockstatement1, doc (showString "else"), prt 0 blockstatement2])

instance Print For where
  prt i e = case e of
    For1 label range blockstatement -> prPrec i 0 (concatD [doc (showString "for"), prt 0 label, doc (showString "in"), prt 0 range, prt 0 blockstatement])
    For2 label range statement -> prPrec i 0 (concatD [doc (showString "for"), prt 0 label, doc (showString "in"), prt 0 range, doc (showString "do"), prt 0 statement])

instance Print TryCatch where
  prt i e = case e of
    Trycat statement1 statement2 -> prPrec i 0 (concatD [doc (showString "try"), prt 0 statement1, doc (showString "catch"), prt 0 statement2])

instance Print Expression where
  prt i e = case e of
    Exp1 expression1 expression2 -> prPrec i 1 (concatD [prt 1 expression1, doc (showString "&&"), prt 2 expression2])
    Exp2 expression1 expression2 -> prPrec i 1 (concatD [prt 1 expression1, doc (showString "||"), prt 2 expression2])
    Exp3 expression -> prPrec i 2 (concatD [doc (showString "!"), prt 3 expression])
    Exp4 expression1 expression2 -> prPrec i 3 (concatD [prt 3 expression1, doc (showString "=="), prt 4 expression2])
    Exp5 expression1 expression2 -> prPrec i 3 (concatD [prt 3 expression1, doc (showString "<"), prt 4 expression2])
    Exp6 expression1 expression2 -> prPrec i 3 (concatD [prt 3 expression1, doc (showString ">"), prt 4 expression2])
    Exp7 expression1 expression2 -> prPrec i 3 (concatD [prt 3 expression1, doc (showString "<="), prt 4 expression2])
    Exp8 expression1 expression2 -> prPrec i 3 (concatD [prt 3 expression1, doc (showString ">="), prt 4 expression2])
    Exp9 expression1 expression2 -> prPrec i 4 (concatD [prt 4 expression1, doc (showString "+"), prt 5 expression2])
    Exp10 expression1 expression2 -> prPrec i 4 (concatD [prt 4 expression1, doc (showString "-"), prt 5 expression2])
    Exp11 expression1 expression2 -> prPrec i 4 (concatD [prt 4 expression1, doc (showString "*"), prt 5 expression2])
    Exp12 expression1 expression2 -> prPrec i 4 (concatD [prt 4 expression1, doc (showString "/"), prt 5 expression2])
    Exp13 expression -> prPrec i 5 (concatD [doc (showString "++"), prt 6 expression])
    Exp14 expression -> prPrec i 5 (concatD [doc (showString "--"), prt 6 expression])
    Exp15 expression -> prPrec i 5 (concatD [prt 6 expression, doc (showString "++")])
    Exp17 expression -> prPrec i 5 (concatD [prt 6 expression, doc (showString "--")])
    Exp18 expression -> prPrec i 5 (concatD [doc (showString "*"), prt 6 expression])
    Exp19 expression -> prPrec i 5 (concatD [doc (showString "&"), prt 6 expression])
    Exp20 value -> prPrec i 6 (concatD [prt 0 value])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Value where
  prt i e = case e of
    Val1 lvalue -> prPrec i 0 (concatD [prt 0 lvalue])
    Val2 literal -> prPrec i 0 (concatD [prt 0 literal])
    Val3 functioncall -> prPrec i 0 (concatD [prt 0 functioncall])

instance Print Label where
  prt i e = case e of
    Lbl id -> prPrec i 0 (concatD [prt 0 id])

instance Print TypeSpec where
  prt i e = case e of
    Typel1 -> prPrec i 0 (concatD [doc (showString "int")])
    Typel2 -> prPrec i 0 (concatD [doc (showString "real")])
    Typel3 -> prPrec i 0 (concatD [doc (showString "bool")])
    Typel4 -> prPrec i 0 (concatD [doc (showString "string")])
    Typel5 -> prPrec i 0 (concatD [doc (showString "char")])
    Typel6 -> prPrec i 0 (concatD [doc (showString "void")])

instance Print Literal where
  prt i e = case e of
    Ltrl1 n -> prPrec i 0 (concatD [prt 0 n])
    Ltrl2 d -> prPrec i 0 (concatD [prt 0 d])
    Ltrl3 c -> prPrec i 0 (concatD [prt 0 c])
    Ltrl4 str -> prPrec i 0 (concatD [prt 0 str])
    Ltrl5 arrayelement -> prPrec i 0 (concatD [prt 0 arrayelement])


