comment "//";
comment "/*" "*/";

entrypoints Program;

Progr.	Program ::= [Stmt];
{--
separator nonempty Test "";
Prog. Prog ::= [Test];
rules	Test ::= Id | Boolean | LInt | LReal | LString | TypeSpec;
--}
token Id (letter (letter | digit | '_' )*'$'?);
separator nonempty Id ",";

rules Boolean ::= "true" | "false" ;

token LInt digit+;

token LReal (((digit?) '.'digit+)(('e'|'E') ('-')? digit+)?) | (digit+ ('.')?('e'|'E')('-')? digit+);

rules LString ::= Char | String;

rules TypeSpec ::= "int"| "real" | "bool" | "string" | "char" | "void" ;

separator  nonempty Exp ",";

VarDeclS.	Var_Decl_stmt ::= Parameter [Var_Decl] ;

rules Parameter ::= "const" | "ref" | "value" | "var" ;
--	var is used for declaring regular variables in chapel

separator nonempty Var_Decl ",";

VarDecTI.	Var_Decl ::= [Id] Type_part Init_part;
VarDecI.	Var_Decl ::= [Id] Init_part;
VarDec.		Var_Decl ::= [Id] Type_part;

TAss.	Type_part ::= ":" TypeSpec;
Init.	Init_part ::= "=" Exp;

ELiteral.	Exp3 ::= Literal_exp ;
ECast.		Exp4 ::= Cast_exp;
ELValue.	Exp5 ::= LValue_exp;
EUnary.		Exp  ::= Unary_exp;
EBinary.	Exp2 ::= Binary_exp;

rules Literal_exp ::= Boolean | LInt | LReal | LString ;

Cast.	Cast_exp ::= Exp ":" TypeSpec;

FunCall.	LValue_exp ::= LValue_exp "(" [Named_exp] ")";
Fname.		LValue_exp ::= Id ;
Parens.		LValue_exp ::= "(" Exp ")";
ArrayI.		LValue_exp ::= Id ":" "[" [Range_exp] "]" ;
ArrayIT.	LValue_exp ::= Id ":" "[" [Range_exp] "]" TypeSpec  ;
separator Range_exp ",";
rules Range_exp ::= Exp ".." Exp | Exp ".." | ".." Exp | ".." ;

separator nonempty Named_exp ",";
rules Named_exp ::= Exp | Id "=" Exp ;

UnaryE.	Unary_exp ::= Unary_op Exp;

rules Unary_op ::= "+" | "-" | "!" ;

BinaryE. Binary_exp ::= Exp  Binary_op Exp;

rules Binary_op ::= "||" | "&&" | "!=" | "==" | ">" | "<" | ">=" | "<=" | "+" | "-" | "|" | "^" | "&" | "*" | "/" | "%" | "**"; 

SExp.		Stmt ::= LValue_exp; 
SBlock.		Stmt ::= Block_stmt;
SAssign.	Stmt ::= Assign_stmt;
SIO.		Stmt ::= IO_stmt;
SCondit.	Stmt ::= Cond_stmt;
SWhileDo.	Stmt ::= While_stmt;
SDoWhile.	Stmt ::= Do_stmt;
SFor.		Stmt ::= For_stmt;
SBreak.		Stmt ::= Break_stmt;
SContinue.	Stmt ::= Continue_stmt;
SReturn.	Stmt ::= Return_stmt;
SProcDecl.	Stmt ::= Proc_Decl_stmt;
SVarDecl.	Stmt ::= Var_Decl_stmt;
STryCatch.	Stmt ::= TryCatch_stmt;

BlockS.	Block_stmt ::= "{" [Stmt] "}";

separator Stmt ";" ;

TryCatch.	TryCatch_stmt ::= "try" Stmt "catch" Stmt ; 

AssignS.	Assign_stmt ::= LValue_exp Assignment_op Exp; 

Assign.		Assignment_op ::= "=" ;
AssgnAdd.	Assignment_op ::= "+=" ;
AssgnSub.	Assignment_op ::= "-=" ;
AssgnMul.	Assignment_op ::= "*=" ;
AssgnDiv.	Assignment_op ::= "/=" ;
AssgnMod.	Assignment_op ::= "%=" ;
AssgnPow.	Assignment_op ::= "**=" ;
AssgnAnd.	Assignment_op ::= "&=" ;
AssgnOr.	Assignment_op ::= "|=" ;
AssgnXor.	Assignment_op ::= "^=" ;

WriteI.		IO_stmt ::= "writeInt" "(" [Exp] ")" ;
ReadI.		IO_stmt ::= "readInt" "(" [Exp] ")" ;
WriteR.		IO_stmt ::= "writeReal" "(" [Exp] ")" ;
WriteC.		IO_stmt ::= "writeChar" "(" [Exp] ")";
ReadC.		IO_stmt ::= "readChar" "(" [Exp] ")";
WriteS.		IO_stmt ::= "writeString" "(" [Exp] ")";
ReadS.		IO_stmt ::= "readString" "(" [Exp] ")";

CondNoElseS.	Cond_stmt ::= "if" Exp "then" Stmt;
CondElseS.	Cond_stmt ::= "if" Exp "then" Stmt "else" Stmt;
CondNoElBlS.	Cond_stmt ::= "if" Exp  Block_stmt;
CondElBlS.	Cond_stmt ::= "if" Exp  Block_stmt "else" Stmt;

WhileDo.	While_stmt ::= "while" Exp "do" Stmt;
While.		While_stmt ::= "while" Exp Block_stmt;

DoWhile.	Do_stmt ::= "do" Stmt "while" Exp;

ForInDo.	For_stmt ::= "for" Id "in" Exp "do" Stmt;
ForIn.		For_stmt ::= "for" Id "in" Exp Block_stmt;
ForDo.		For_stmt ::= "for" Exp "do" Stmt;
For.		For_stmt ::= "for" Exp Block_stmt;

rules Break_stmt ::= "break" | "break" Id ;
rules Continue_stmt ::= "continue" | "continue" Id ;
rules Return_stmt ::= "return"  | "return" Exp  ;

ProcDef.	Proc_Decl_stmt ::= "proc" Id Func_body;
ProcDefArg.	Proc_Decl_stmt ::= "proc" Id Arg_list Func_body;
ProcDefPar.	Proc_Decl_stmt ::= "proc" Id Parameter Func_body;
ProcDefRet.	Proc_Decl_stmt ::= "proc" Id Ret_type  Func_body;
ProcDefArP.	Proc_Decl_stmt ::= "proc" Id Arg_list Parameter Func_body;
ProcDefArR.	Proc_Decl_stmt ::= "proc" Id Arg_list Ret_type Func_body;
ProcDefAPR.	Proc_Decl_stmt ::= "proc" Id Arg_list Parameter Ret_type Func_body;

ArgumentLst.	Arg_list ::= "(" [Formal] ")";
separator Formal ",";

rules Formal ::= Id 
		| Parameter Id 
		| Id Type_part 
		| Id Init_part 
		| Id Type_part Init_part 
		| Parameter Id Type_part
		| Parameter Id Type_part Init_part ;

rules Ret_type ::= Type_part ;

rules Func_body ::= Block_stmt | Return_stmt ;
