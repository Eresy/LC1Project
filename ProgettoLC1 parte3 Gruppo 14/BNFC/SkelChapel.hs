module SkelChapel where

-- Haskell module generated by the BNF converter

import AbsChapel
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transS :: S -> Result
transS x = case x of
  Init program -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prgrm statements -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  Stmt1 blockstatement -> failure x
  Stmt2 expression -> failure x
  Stmt4 assignment -> failure x
  Stmt5 declaration -> failure x
  Stmt6 funcdeclaration -> failure x
  Stmt7 whiledo -> failure x
  Stmt8 dowhile -> failure x
  Stmt9 for -> failure x
  Stmt11 if_ -> failure x
  Stmt12 trycatch -> failure x
  Stmt13 -> failure x
  Stmt14 -> failure x
  Stmt15 expression -> failure x
transBlockStatement :: BlockStatement -> Result
transBlockStatement x = case x of
  Bstmt statements -> failure x
transFunctionCall :: FunctionCall -> Result
transFunctionCall x = case x of
  Fcall1 label parameterlist -> failure x
transFuncDeclaration :: FuncDeclaration -> Result
transFuncDeclaration x = case x of
  Fdec1 label parameterdecl cast blockstatement -> failure x
  Fdec2 label parameterdecl blockstatement -> failure x
  Fdec3 label cast blockstatement -> failure x
  Fdec4 label blockstatement -> failure x
transParameterDecl :: ParameterDecl -> Result
transParameterDecl x = case x of
  ParDec parameters -> failure x
transParameter :: Parameter -> Result
transParameter x = case x of
  Par mode label cast -> failure x
transParameterList :: ParameterList -> Result
transParameterList x = case x of
  ParLst expressions -> failure x
transMode :: Mode -> Result
transMode x = case x of
  Mode1 -> failure x
  Mode2 -> failure x
  Mode3 -> failure x
  Mode4 -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  Decl1 pointers label cast -> failure x
transAssignment :: Assignment -> Result
transAssignment x = case x of
  Asgmt1 label rvalue -> failure x
  Asgmt2 pointers label rvalue -> failure x
  Asgmt3 declaration rvalue -> failure x
transRange :: Range -> Result
transRange x = case x of
  Rng1 expression1 expression2 -> failure x
  Rng2 expression -> failure x
  Rng3 expression -> failure x
  Rng4 -> failure x
transCast :: Cast -> Result
transCast x = case x of
  Cast1 typespec -> failure x
  Cast2 range typespec -> failure x
transPointer :: Pointer -> Result
transPointer x = case x of
  Ptr -> failure x
transLValue :: LValue -> Result
transLValue x = case x of
  Lval1 label -> failure x
  Lval2 label arrayindexs -> failure x
transRValue :: RValue -> Result
transRValue x = case x of
  Rval1 expression -> failure x
transArrayIndex :: ArrayIndex -> Result
transArrayIndex x = case x of
  Arr1 expression -> failure x
transArrayElement :: ArrayElement -> Result
transArrayElement x = case x of
  Arrel literallists -> failure x
transLiteralList :: LiteralList -> Result
transLiteralList x = case x of
  Arrlst value -> failure x
transWhileDo :: WhileDo -> Result
transWhileDo x = case x of
  Wd expression blockstatement -> failure x
transDoWhile :: DoWhile -> Result
transDoWhile x = case x of
  Dw blockstatement expression -> failure x
transIf :: If -> Result
transIf x = case x of
  If1 expression blockstatement -> failure x
  If2 expression blockstatement1 blockstatement2 -> failure x
transFor :: For -> Result
transFor x = case x of
  For1 label range blockstatement -> failure x
  For2 label range statement -> failure x
transTryCatch :: TryCatch -> Result
transTryCatch x = case x of
  Trycat statement1 statement2 -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  Exp1 expression1 expression2 -> failure x
  Exp2 expression1 expression2 -> failure x
  Exp3 expression -> failure x
  Exp4 expression1 expression2 -> failure x
  Exp5 expression1 expression2 -> failure x
  Exp6 expression1 expression2 -> failure x
  Exp7 expression1 expression2 -> failure x
  Exp8 expression1 expression2 -> failure x
  Exp9 expression1 expression2 -> failure x
  Exp10 expression1 expression2 -> failure x
  Exp11 expression1 expression2 -> failure x
  Exp12 expression1 expression2 -> failure x
  Exp13 expression -> failure x
  Exp14 expression -> failure x
  Exp15 expression -> failure x
  Exp17 expression -> failure x
  Exp18 expression -> failure x
  Exp19 expression -> failure x
  Exp20 value -> failure x
transValue :: Value -> Result
transValue x = case x of
  Val1 lvalue -> failure x
  Val2 literal -> failure x
  Val3 functioncall -> failure x
transLabel :: Label -> Result
transLabel x = case x of
  Lbl ident -> failure x
transTypeSpec :: TypeSpec -> Result
transTypeSpec x = case x of
  Typel1 -> failure x
  Typel2 -> failure x
  Typel3 -> failure x
  Typel4 -> failure x
  Typel5 -> failure x
  Typel6 -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  Ltrl1 integer -> failure x
  Ltrl2 double -> failure x
  Ltrl3 char -> failure x
  Ltrl4 string -> failure x
  Ltrl5 arrayelement -> failure x

