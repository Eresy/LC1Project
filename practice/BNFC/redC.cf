-- Reduced C starting from K&R Ansi C
--
entrypoints Program, Stm, Exp ;

Progr.  Program ::= [External_declaration] ;

terminator nonempty External_declaration "";

Afunc.  External_declaration ::= Function_def ;
Global. External_declaration ::= Dec ;

OldFunc.     Function_def ::= [Declaration_specifier] Declarator [Dec] Compound_stm ;
NewFunc.     Function_def ::= [Declaration_specifier] Declarator Compound_stm ;
OldFuncInt.  Function_def ::= Declarator [Dec] Compound_stm ;
NewFuncInt.  Function_def ::= Declarator Compound_stm ;


NoDeclarator.  Dec ::= [Declaration_specifier] ";";
Declarators.   Dec ::= [Declaration_specifier] [Init_declarator] ";" ;

terminator nonempty Dec "";

terminator nonempty Declaration_specifier "" ;

Type.     Declaration_specifier ::= Type_specifier ;

separator nonempty Init_declarator "," ;

OnlyDecl.  Init_declarator ::= Declarator ;
InitDecl.  Init_declarator ::= Declarator "=" Initializer;

Tvoid.        Type_specifier ::= "void";
Tchar.        Type_specifier ::= "char";
Tint.         Type_specifier ::= "int";
Tfloat.       Type_specifier ::= "float";

separator nonempty Spec_qual "";

TypeSpec.  Spec_qual ::= Type_specifier ;

BeginPointer.   Declarator ::= Pointer Direct_declarator ;
NoPointer.      Declarator ::= Direct_declarator ;

Name.        Direct_declarator ::= Ident ;
ParenDecl.   Direct_declarator ::= "(" Declarator ")" ;
InnitArray.  Direct_declarator ::= Direct_declarator "[" Constant_expression "]" ;
Incomplete.  Direct_declarator ::= Direct_declarator "[" "]" ;
NewFuncDec.  Direct_declarator ::= Direct_declarator "(" Parameter_type ")" ;
OldFuncDef.  Direct_declarator ::= Direct_declarator "(" [Ident] ")" ;
OldFuncDec.  Direct_declarator ::= Direct_declarator "(" ")" ;

Point.          Pointer ::= "*" ;
PointPoint.     Pointer ::= "*" Pointer ;

AllSpec.  Parameter_type ::= Parameter_declarations ;
More.     Parameter_type ::= Parameter_declarations "," "..." ;

ParamDec.     Parameter_declarations ::= Parameter_declaration ;                   
MoreParamDec. Parameter_declarations ::= Parameter_declarations "," Parameter_declaration ;

OnlyType.      Parameter_declaration ::= [Declaration_specifier] ;
TypeAndParam.  Parameter_declaration ::= [Declaration_specifier] Declarator ;
Abstract.      Parameter_declaration ::= [Declaration_specifier] Abstract_declarator ;

separator nonempty Ident ",";

InitExpr.    Initializer ::= Exp2 ;
InitListOne. Initializer ::= "{" Initializers "}" ;
InitListTwo. Initializer ::= "{" Initializers "," "}" ;

AnInit.   Initializers ::= Initializer ;
MoreInit. Initializers ::= Initializers "," Initializer ;

PlainType.    Type_name ::= [Spec_qual] ;
ExtendedType. Type_name ::= [Spec_qual] Abstract_declarator ;

PointerStart.    Abstract_declarator ::= Pointer ;
Advanced.        Abstract_declarator ::= Dir_abs_dec ;
PointAdvanced.   Abstract_declarator ::= Pointer Dir_abs_dec ;

WithinParentes.  Dir_abs_dec ::= "(" Abstract_declarator ")" ;
Array.           Dir_abs_dec ::= "[" "]" ;
InitiatedArray.  Dir_abs_dec ::= "[" Constant_expression "]" ;
UnInitiated.     Dir_abs_dec ::= Dir_abs_dec "[" "]" ;
Initiated.       Dir_abs_dec ::= Dir_abs_dec "[" Constant_expression "]" ;
OldFunction.     Dir_abs_dec ::= "(" ")" ;
NewFunction.     Dir_abs_dec ::= "(" Parameter_type ")" ;
OldFuncExpr.     Dir_abs_dec ::= Dir_abs_dec "(" ")" ;
NewFuncExpr.     Dir_abs_dec ::= Dir_abs_dec "(" Parameter_type ")" ;


CompS.    Stm ::= Compound_stm ;
ExprS.    Stm ::= Expression_stm ";";
SelS.     Stm ::= Selection_stm ;
IterS.    Stm ::= Iter_stm ;
JumpS.    Stm ::= Jump_stm ";";

ScompOne.   Compound_stm ::= "{" "}" ;
ScompTwo.   Compound_stm ::= "{" [Stm] "}" ;
ScompThree. Compound_stm ::= "{" [Dec] "}" ;
ScompFour.  Compound_stm ::= "{" [Dec] [Stm] "}" ;

SexprOne.   Expression_stm ::= ;
SexprTwo.   Expression_stm ::= Exp ;

SselOne.    Selection_stm ::= "if" "(" Exp ")" Stm ;
SselTwo.    Selection_stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SselThree.  Selection_stm ::= "switch" "(" Exp ")" Stm ;

SiterOne.   Iter_stm ::= "while" "(" Exp ")" Stm;
SiterTwo.   Iter_stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SiterThree. Iter_stm ::= "for" "(" Expression_stm Expression_stm ")" Stm ;
SiterFour.  Iter_stm ::= "for" "(" Expression_stm Expression_stm Exp ")" Stm;

SjumpOne.   Jump_stm ::= "goto" Ident ;
SjumpTwo.   Jump_stm ::= "continue" ;
SjumpThree. Jump_stm ::= "break" ;
SjumpFour.  Jump_stm ::= "return" ;
SjumpFive.  Jump_stm ::= "return" Exp ;


separator nonempty Stm "";

token Unsigned ["123456789"] digit * ('u'|'U');

token Long ["123456789"] digit * ('l'|'L');

token UnsignedLong ["123456789"] digit * (('u''l')|('U''L'));

token Hexadecimal '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+;

token HexUnsigned '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('u'|'U');

token HexLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('l'|'L');

token HexUnsLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ (('u''l')|('U''L'));

token Octal '0'["01234567"]*;

token OctalUnsigned '0'["01234567"]*('u'|'U');

token OctalLong '0'["01234567"]* ('l'|'L');

token OctalUnsLong '0'["01234567"]* (('u''l')|('U''L'));

token CDouble (((digit+ '.')|('.' digit+))(('e'|'E') ('-')? digit+)?)|
              (digit+ ('e'|'E') ('-')? digit+)|(digit+ '.' digit+ 'E' ('-')? digit+);

token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               ('f'|'F'))|((digit+ ('e'|'E')('-')? digit+)('f'|'F'));

token CLongDouble (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? 
                   digit+)?('l'|'L'))|((digit+ ('e'|'E')('-')? digit+)('l'|'L'));



Ecomma.      Exp   ::= Exp "," Exp2;
Eassign.     Exp2  ::= Exp15 Assignment_op Exp2;
Econdition.  Exp3  ::= Exp4 "?" Exp ":" Exp3;
Elor.        Exp4  ::= Exp4 "||" Exp5;
Eland.       Exp5  ::= Exp5 "&&" Exp6;
Ebitor.      Exp6  ::= Exp6 "|" Exp7;
Ebitexor.    Exp7  ::= Exp7 "^" Exp8;
Ebitand.     Exp8  ::= Exp8 "&" Exp9;
Eeq.         Exp9  ::= Exp9 "==" Exp10;
Eneq.        Exp9  ::= Exp9 "!=" Exp10;
Elthen.      Exp10 ::= Exp10 "<" Exp11;
Egrthen.     Exp10 ::= Exp10 ">" Exp11;
Ele.         Exp10 ::= Exp10 "<=" Exp11;
Ege.         Exp10 ::= Exp10 ">=" Exp11;
Eleft.       Exp11 ::= Exp11 "<<" Exp12;
Eright.      Exp11 ::= Exp11 ">>" Exp12;
Eplus.       Exp12 ::= Exp12 "+" Exp13;
Eminus.      Exp12 ::= Exp12 "-" Exp13;
Etimes.      Exp13 ::= Exp13 "*" Exp14;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Emod.        Exp13 ::= Exp13 "%" Exp14;
Etypeconv.   Exp14 ::= "(" Type_name ")" Exp14;
Epreinc.     Exp15 ::= "++" Exp15;
Epredec.     Exp15 ::= "--" Exp15;
Epreop.      Exp15 ::= Unary_operator Exp14;
Ebytesexpr.  Exp15 ::= "sizeof" Exp15;
Ebytestype.  Exp15 ::= "sizeof" "(" Type_name ")";
Earray.      Exp16 ::= Exp16 "[" Exp "]" ;
Efunk.       Exp16 ::= Exp16 "(" ")";
Efunkpar.    Exp16 ::= Exp16 "(" [Exp2] ")";
Eselect.     Exp16 ::= Exp16 "." Ident;
Epoint.      Exp16 ::= Exp16 "->" Ident;
Epostinc.    Exp16 ::= Exp16 "++";
Epostdec.    Exp16 ::= Exp16 "--";
Evar.        Exp17 ::= Ident;
Econst.      Exp17 ::= Constant;
Estring.     Exp17 ::= String;

Efloat.        Constant ::= Double;
Echar.         Constant ::= Char;
Eunsigned.     Constant ::= Unsigned;
Elong.         Constant ::= Long;
Eunsignlong.   Constant ::= UnsignedLong;
Ehexadec.      Constant ::= Hexadecimal;
Ehexaunsign.   Constant ::= HexUnsigned;
Ehexalong.     Constant ::= HexLong;
Ehexaunslong.  Constant ::= HexUnsLong;
Eoctal.        Constant ::= Octal;
Eoctalunsign.  Constant ::= OctalUnsigned;
Eoctallong.    Constant ::= OctalLong;
Eoctalunslong. Constant ::= OctalUnsLong;
Ecdouble.      Constant ::= CDouble;
Ecfloat.       Constant ::= CFloat;
Eclongdouble.  Constant ::= CLongDouble;
Eint.          Constant ::= Integer;  

internal Elonger. Constant ::= Integer;
internal Edouble. Constant ::= Double;

Especial. Constant_expression ::= Exp3;

_. Exp   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= Exp14 ;
_. Exp14 ::= Exp15 ;
_. Exp15 ::= Exp16 ;
_. Exp16 ::= Exp17 ;
_. Exp17 ::= "(" Exp ")" ;

Address.     Unary_operator ::= "&" ;
Indirection. Unary_operator ::= "*" ;
Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Complement.  Unary_operator ::= "~" ;
Logicalneg.  Unary_operator ::= "!" ;

separator nonempty Exp2 ",";

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignMod.    Assignment_op ::= "%=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;
AssignLeft.   Assignment_op ::= "<<=" ;
AssignRight.  Assignment_op ::= ">>=" ;
AssignAnd.    Assignment_op ::= "&=" ;
AssignXor.    Assignment_op ::= "^=" ;
AssignOr.     Assignment_op ::= "|=" ;

comment "/*" "*/" ;
comment "//";
comment "#";
