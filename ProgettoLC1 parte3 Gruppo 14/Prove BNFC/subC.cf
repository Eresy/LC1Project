--A program is a sequence of definitions
PDefs.	Program ::= [Def] ;
terminator Def "" ;
--
comment "//" ;
comment "/*" "*/" ;
--function definition in one rule, in addition 
--to which we specify the form of argument and statement lists
DFun.	Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator  Arg "," ;
terminator Stm "" ;
--An argument declaration has a type and an identifier
ADecl.	Arg ::= Type Id ;
--Any expression followed by a semicolon ; can be used as a statement.
SExp.	Stm ::= Exp ";" ;
--Any Declaration followed by a semicolon ; can be used as a statement.
SDecl.	Stm ::= Type Id ";" ;
SDecls.	Stm ::= Type Id "," [Id] ";" ;
SInit.	Stm ::= Type Id "=" Exp ";" ;
--Statements also include return,while,ifelse, blocks:
SReturn. Stm    ::= "return" Exp ";" ;
SWhile.  Stm    ::= "while" "(" Exp ")" Stm ;
SBlock.  Stm    ::= "{" [Stm] "}" ;
SIfElse. Stm    ::= "if" "(" Exp ")" Stm "else" Stm ;
--Statements also include built-in functions
StmF.	Stm	::= "readInt" "(" ")" ";";
StmF2.	Stm	::= "writeInt" "(" Exp ")" ";";
StmF3.	Stm	::= "readFloat" "(" ")" ";";
StmF4.	Stm	::= "writeFloat" "(" Exp ")" ";";
StmF5.	Stm	::= "readChar" "(" ")" ";";
StmF6.	Stm	::= "writeChar" "(" Exp ")" ";";
StmF7.	Stm	::= "readString" "(" ")" ";";
StmF8.	Stm	::= "writeString" "(" Exp ")" ";";


EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EId.     Exp15  ::= Id ;
EApp.    Exp15  ::= Id "(" [Exp] ")" ;
EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;
EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;
EArray.  Exp13	::= Exp13"[" Exp15 "]"; --------
ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtWq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;

coercions Exp 15 ;
separator Exp "," ;

--The available types are bool, double, int, and void.
Tbool.   Type ::= "bool" ;
Tdouble. Type ::= "double" ;
Tint.    Type ::= "int" ;
Tvoid.   Type ::= "void" ;

--An identifier is a letter followed by a list of letters, digits, and underscores.
--Here we cannot use the built-in Ident type of BNFC, because apostrophes (â€™) are not permitted!
--But we can define our identifiers easily by a regular expression:
token Id (letter (letter | digit | '_')*) ;
separator nonempty Id ",";

--an array declaration has a type, an identifier followed by the number of arguments in the array
InitArray.	Stm ::= Type Id"[" Integer "]" ";" ;
IncoArray.	Stm ::= Type Id"[" "]" ";";
CompArray.	Stm ::= Type Id"[" "]" "=" "{" [Exp] "}"  ";";
CompArray1.	Stm ::= Type Id"[" Integer "]" "=" "{" [Exp] "}"  ";";
--
InitPointer.	Stm ::= Type "*"Id ";";
InitPointer2.	Stm ::= Type "*"Id "=" Exp ";";
Pointer.	Srm ::= "*"Id ";";
