

module AbsChapel where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data S = Init Program
  deriving (Eq, Ord, Show, Read)

data Program = Prgrm [Statement]
  deriving (Eq, Ord, Show, Read)

data Statement
    = Stmt1 BlockStatement
    | Stmt2 Expression
    | Stmt4 Assignment
    | Stmt5 Declaration
    | Stmt6 FuncDeclaration
    | Stmt7 WhileDo
    | Stmt8 DoWhile
    | Stmt9 For
    | Stmt11 If
    | Stmt12 TryCatch
    | Stmt13
    | Stmt14
    | Stmt15 Expression
  deriving (Eq, Ord, Show, Read)

data BlockStatement = Bstmt [Statement]
  deriving (Eq, Ord, Show, Read)

data FunctionCall = Fcall1 Label ParameterList
  deriving (Eq, Ord, Show, Read)

data FuncDeclaration
    = Fdec1 Label ParameterDecl Cast BlockStatement
    | Fdec2 Label ParameterDecl BlockStatement
    | Fdec3 Label Cast BlockStatement
    | Fdec4 Label BlockStatement
  deriving (Eq, Ord, Show, Read)

data ParameterDecl = ParDec [Parameter]
  deriving (Eq, Ord, Show, Read)

data Parameter = Par Mode Label Cast
  deriving (Eq, Ord, Show, Read)

data ParameterList = ParLst [Expression]
  deriving (Eq, Ord, Show, Read)

data Mode = Mode1 | Mode2 | Mode3 | Mode4
  deriving (Eq, Ord, Show, Read)

data Declaration = Decl1 [Pointer] Label Cast
  deriving (Eq, Ord, Show, Read)

data Assignment
    = Asgmt1 Label RValue
    | Asgmt2 [Pointer] Label RValue
    | Asgmt3 Declaration RValue
  deriving (Eq, Ord, Show, Read)

data Range
    = Rng1 Expression Expression
    | Rng2 Expression
    | Rng3 Expression
    | Rng4
  deriving (Eq, Ord, Show, Read)

data Cast = Cast1 TypeSpec | Cast2 Range TypeSpec
  deriving (Eq, Ord, Show, Read)

data Pointer = Ptr
  deriving (Eq, Ord, Show, Read)

data LValue = Lval1 Label | Lval2 Label [ArrayIndex]
  deriving (Eq, Ord, Show, Read)

data RValue = Rval1 Expression
  deriving (Eq, Ord, Show, Read)

data ArrayIndex = Arr1 Expression
  deriving (Eq, Ord, Show, Read)

data ArrayElement = Arrel [LiteralList]
  deriving (Eq, Ord, Show, Read)

data LiteralList = Arrlst Value
  deriving (Eq, Ord, Show, Read)

data WhileDo = Wd Expression BlockStatement
  deriving (Eq, Ord, Show, Read)

data DoWhile = Dw BlockStatement Expression
  deriving (Eq, Ord, Show, Read)

data If
    = If1 Expression BlockStatement
    | If2 Expression BlockStatement BlockStatement
  deriving (Eq, Ord, Show, Read)

data For
    = For1 Label Range BlockStatement | For2 Label Range Statement
  deriving (Eq, Ord, Show, Read)

data TryCatch = Trycat Statement Statement
  deriving (Eq, Ord, Show, Read)

data Expression
    = Exp1 Expression Expression
    | Exp2 Expression Expression
    | Exp3 Expression
    | Exp4 Expression Expression
    | Exp5 Expression Expression
    | Exp6 Expression Expression
    | Exp7 Expression Expression
    | Exp8 Expression Expression
    | Exp9 Expression Expression
    | Exp10 Expression Expression
    | Exp11 Expression Expression
    | Exp12 Expression Expression
    | Exp13 Expression
    | Exp14 Expression
    | Exp15 Expression
    | Exp17 Expression
    | Exp18 Expression
    | Exp19 Expression
    | Exp20 Value
  deriving (Eq, Ord, Show, Read)

data Value = Val1 LValue | Val2 Literal | Val3 FunctionCall
  deriving (Eq, Ord, Show, Read)

data Label = Lbl Ident
  deriving (Eq, Ord, Show, Read)

data TypeSpec = Typel1 | Typel2 | Typel3 | Typel4 | Typel5 | Typel6
  deriving (Eq, Ord, Show, Read)

data Literal
    = Ltrl1 Integer
    | Ltrl2 Double
    | Ltrl3 Char
    | Ltrl4 String
    | Ltrl5 ArrayElement
  deriving (Eq, Ord, Show, Read)

