Init.	S ::= [TopStatement] ;

terminator TopStatement "" ;
Tstat.	TopStatement ::= Definition ;

terminator Statement "" ;
Stat.	Statement ::= Assignment ;
Stat2.	Statement ::= Definition  ;
Stat3.	Statement ::= FunctionCall ;
Stat4.	Statement ::= "return" Expression ";" ;
Stat5.	Statement ::= Flowcontrol;

Assign.	Assignment ::= LValue "=" RValue ";" ;

Def.	Definition ::= TypeLabel LValue ";" ;
Def2.	Definition ::= TypeLabel Assignment ;
Def3.	Definition ::= FunctionDef ;
FDef.	FunctionDef ::= TypeLabel Label "(" [Argument] ")" "{" [Instruction] "}" ;
PDef.	FunctionDef ::= "void" Label "(" [Argument] ")" "{" [Instruction] "}" ;
 	
Lval.	LValue ::= Label ;
Lval2.	LValue ::= Label Array ;
Lval3.	LValue ::= Pointer Array ;
Lval4.	LValue ::= Pointer Label ;

--Rval.	RValue ::= LValue ;
Rval2.	RValue ::= Expression ;
Rval3.	RValue ::= Assignment ;
--Rval4.	RValue ::= FunctionCall ;
Rval5.	RValue ::= ArrayDef ;

Type1.	Type ::= Integer ;
Type2.	Type ::= Char ;
Type3.	Type ::= String ;
Type4.	Type ::= "True" ;
Type5.	Type ::= "False" ;
Type6.	Type ::= Double ;

Typel.	TypeLabel ::= "int";
Typel2.	TypeLabel ::= "char";
Typel3.	TypeLabel ::= "double";
Typel4.	TypeLabel ::= "String";

PredF.	PredFunction ::= "readInt" "(" ")" ;
PredF2.	PredFunction ::= "writeInt" "(" Expression ")";
PredF3.	PredFunction ::= "readFloat" "(" ")" ;
PredF4.	PredFunction ::= "writeFloat" "(" Expression ")";
PredF5.	PredFunction ::= "readChar" "(" ")" ;
PredF6.	PredFunction ::= "writeChar" "(" Expression ")";
PredF7.	PredFunction ::= "readString" "(" ")" ;
PredF8.	PredFunction ::= "writeString" "(" Expression ")";

Fcall.	FunctionCall ::= Label "(" [Parameter] ")" ";" ;
Fcall2.	FunctionCall ::= PredFunction ";" ;
separator Parameter "," ;
Parm.	Parameter ::= RValue ;

separator Argument "," ;
Args.	Argument ::= PassingType TypeLabel Label ;
PassT.	PassingType ::= ;
PassT2.	PassingType ::= "valres";

Fctrl.	FlowControl ::= IfThenElse ;
Fctrl2.	FlowControl ::= While ;
Fctrl3.	FlowControl ::= For ;

<<<<<<< HEAD
separator FlowStatement ";" ;
Fstmt.	FlowStatement ::= "break"  ;
Fstmt2.	FlowStatement ::= "continue";
||||||| merged common ancestors
separator FlowStatement "" ;
Fstmt.	FlowStatement ::= "break" ";" ;
Fstmt2.	FlowStatement ::= "continue" ";" ;
=======
separator FlowStatement ";" ;
Fstmt.	FlowStatement ::= "break" ;
Fstmt2.	FlowStatement ::= "continue" ;
>>>>>>> 85c7c8c82ff5714fedcf787f9f6597c2d453266c
Fstmt3.	FlowStatement ::= Statement;

If.		IfThenElse ::= "if" "(" Expression ")" Then ;
If2.	IfThenElse ::= "if" "(" Expression ")" Then Else ;
ThenS.	Then ::= "{" [Statement] "}" ;
ElseS.	Else ::= "else" Then ;

WhileS.	While ::= "while" "(" Expression ")" "{" [FlowStatement] "}" ;
ForS.	For ::= "for" "(" ForInd ";" ForExpression ";" ForExpression ")" "{" [FlowStatement] "}" ;
Forind.	ForInd ::= ForVars ;
Forind2.	ForInd ::= ;
Forvar.	ForVars ::= ForVar "," ForVars ;
Forvar2.	ForVars ::= ForVar ;
Forvar3.	ForVar ::=  Assignment;
ForExp.	ForExpression ::= Expression ;
ForExp2.	ForExpression ::= ;

Lbl.	Label ::= Ident ;
Arr.	Array ::= "[" Integer "]" ;
Adef.	ArrayDef ::= "{" [ArrayItem] "}" ;
(:).	[ArrayItem] ::= ArrayItem "," [ArrayItem] ;
Aitm2.	ArrayItem ::= RValue ;
Ptr.	Pointer ::= "*";

Expr1.	Expression1 ::= Expression1 "&&" Expression2 ;
Expr2.	Expression1 ::= Expression1 "||" Expression2 ;
Expr3.	Expression2 ::= "!" Expression3 ;
Expr4.	Expression3 ::= Expression3 "==" Expression4 ;
Expr5.	Expression3 ::= Expression3 "!=" Expression4 ;
Expr6.	Expression3 ::= Expression3 "<" Expression4 ;
Expr7.	Expression3 ::= Expression3 ">" Expression4 ;
Expr8.	Expression3 ::= Expression3 "<=" Expression4 ;
Expr9.	Expression3 ::= Expression3 ">=" Expression4 ;
Expr10.	Expression4 ::= Expression4 "+" Expression5 ;
Expr11.	Expression4 ::= Expression4 "-" Expression5 ;
Expr12.	Expression5 ::= Expression5 "*" Expression6 ;
Expr13.	Expression5 ::= Expression5 "/" Expression6 ;
Expr14.	Expression6 ::= Expression6 "++" ;
Expr15.	Expression6 ::= Expression6 "--" ;
Expr16.	Expression7 ::= "++" Expression7 ;
Expr17.	Expression7 ::= "--" Expression7 ;
Expr18.	Expression7 ::= Type;
Expr19.	Expression7 ::= LValue;
Expr20.	Expression7 ::= FunctionCall;
coercions Expression 7 ;

comment "//" ;
comment "/*" "*/" ;
