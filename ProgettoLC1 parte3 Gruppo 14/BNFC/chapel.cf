
Init.	S		::=	Program;

Prgrm. Program		::=	[Statement];

separator Statement "";

Stmt1.	Statement	::=	BlockStatement;
Stmt2.	Statement	::=	Expression ";";
Stmt4.	Statement	::=	Assignment;
Stmt5.	Statement	::=	Declaration ";";
Stmt6.	Statement	::=	FuncDeclaration;
Stmt7.	Statement	::=	WhileDo;
Stmt8.	Statement	::=	DoWhile;
Stmt9.	Statement	::=	For;
Stmt11.	Statement	::=	If;
Stmt12.	Statement	::=	TryCatch;
Stmt13.	Statement	::=	"break" ";";
Stmt14.	Statement	::=	"continue" ";";
Stmt15. Statement	::=	"return" Expression ";";

Bstmt.	BlockStatement	::=	"{" [Statement] "}";

Fcall1.	FunctionCall	::=	Label ParameterList;

Fdec1.	FuncDeclaration	::=	"proc" Label ParameterDecl Cast BlockStatement;
Fdec2.	FuncDeclaration	::=	"proc" Label ParameterDecl BlockStatement;
Fdec3.	FuncDeclaration	::=	"proc" Label Cast BlockStatement;
Fdec4.	FuncDeclaration	::=	"proc" Label BlockStatement;

ParDec.	ParameterDecl	::=	"(" [Parameter] ")";
Par.	Parameter	::=	Mode Label Cast;
separator Parameter ",";

ParLst.	ParameterList	::=	"(" [Expression] ")";
separator Expression ",";

Mode1.	Mode		::=	"val";
Mode2.	Mode		::=	"ref";
Mode3.	Mode		::=	"const";
Mode4.	Mode		::=	;

Decl1.	Declaration	::=	"var" [Pointer] Label Cast;

Asgmt1.	Assignment	::=	Label "=" RValue ";";
Asgmt2.	Assignment	::=	"var" [Pointer] Label "=" RValue ";";
Asgmt3. Assignment	::=	Declaration "=" RValue ";";

Rng1.	Range		::=	Expression ".." Expression;
Rng2.	Range		::=	Expression "..";
Rng3.	Range		::=	 ".." Expression;
Rng4.	Range		::=	 "..";

Cast1.	Cast		::=	":" TypeSpec;
Cast2.	Cast		::=	":" "[" Range "]" TypeSpec;

Ptr.	Pointer		::=	"*";
separator Pointer "";

Lval1.	LValue		::=	Label;
Lval2.	LValue		::=	Label [ArrayIndex];

Rval1.	RValue		::=	Expression;

Arr1.	ArrayIndex	::=	"[" Expression "]";
separator nonempty ArrayIndex "";

Arrel.	ArrayElement	::=	"(" [LiteralList] ")";
Arrlst.	LiteralList	::=	Value;
separator nonempty LiteralList ",";

Wd.	WhileDo		::=	"while" Expression BlockStatement;
Dw.	DoWhile		::=	"do" BlockStatement "while" Expression ";";

If1.	If		::=	"if" Expression BlockStatement; 
If2.	If		::=	"if" Expression BlockStatement "else" BlockStatement; 

For1.	For		::=	"for" Label "in" Range BlockStatement;
For2.	For		::=	"for" Label "in" Range "do" Statement;

Trycat.	TryCatch	::=	"try" Statement "catch" Statement;

Exp1.	Expression1	::=	Expression1 "&&" Expression2;
Exp2.	Expression1	::=	Expression1 "||" Expression2;
Exp3.	Expression2	::=	"!" Expression3;
Exp4.	Expression3	::=	Expression3 "==" Expression4;
Exp5.	Expression3	::=	Expression3 "<" Expression4;
Exp6.	Expression3	::=	Expression3 ">" Expression4;
Exp7.	Expression3	::=	Expression3 "<=" Expression4;
Exp8.	Expression3	::=	Expression3 ">=" Expression4;
Exp9.	Expression4	::=	Expression4 "+" Expression5;
Exp10.	Expression4	::=	Expression4 "-" Expression5;
Exp11.	Expression4	::=	Expression4 "*" Expression5;
Exp12.	Expression4	::=	Expression4 "/" Expression5;
Exp13.	Expression5	::=	"++" Expression6;
Exp14.	Expression5	::=	"--" Expression6;
Exp15.	Expression5	::=	Expression6 "++";
Exp17.	Expression5	::=	Expression6 "--";
Exp18.	Expression5	::=	"*" Expression6; 
Exp19.	Expression5	::=	"&" Expression6;
Exp20.	Expression6	::=	Value;

coercions Expression 6;

Val1.	Value		::=	LValue;
Val2.	Value		::=	Literal;
Val3.	Value		::=	FunctionCall;

Lbl.	Label		::=	Ident;

Typel1.	TypeSpec	::=	"int";
Typel2.	TypeSpec	::=	"real";
Typel3.	TypeSpec	::=	"bool";
Typel4.	TypeSpec	::=	"string";
Typel5.	TypeSpec	::=	"char";
Typel6.	TypeSpec	::=	"void";

Ltrl1.	Literal		::=	Integer;
Ltrl2.	Literal		::=	Double;
Ltrl3.	Literal		::=	Char;
Ltrl4.	Literal		::=	String;
Ltrl5.	Literal		::=	ArrayElement;
