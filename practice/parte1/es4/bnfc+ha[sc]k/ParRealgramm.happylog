-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from ParRealgramm.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExpT -> ExpT                               (0)
	%start_pListExpT -> ListExpT                       (1)
	Double -> L_doubl                                  (2)
	ExpT -> Double '<' ListExpT '>'                    (3)
	ExpT -> Double                                     (4)
	ListExpT -> ExpT                                   (5)
	ListExpT -> ExpT ',' ListExpT                      (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	','            { PT _ (TS _ 1) }
	'<'            { PT _ (TS _ 2) }
	'>'            { PT _ (TS _ 3) }
	L_doubl        { PT _ (TD $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExpT    rule  0
	%start_pListExpT rule  1
	Double          rule  2
	ExpT            rules 3, 4
	ListExpT        rules 5, 6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	L_doubl        shift, and enter state 3

	Double         goto state 4
	ExpT           goto state 7

State 1


	L_doubl        shift, and enter state 3

	Double         goto state 4
	ExpT           goto state 5
	ListExpT       goto state 6

State 2


	L_doubl        shift, and enter state 3


State 3

	Double -> L_doubl .                                 (rule 2)

	','            reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	ExpT -> Double . '<' ListExpT '>'                   (rule 3)
	ExpT -> Double .                                    (rule 4)

	','            reduce using rule 4
	'<'            shift, and enter state 9
	'>'            reduce using rule 4
	%eof           reduce using rule 4


State 5

	ListExpT -> ExpT .                                  (rule 5)
	ListExpT -> ExpT . ',' ListExpT                     (rule 6)

	','            shift, and enter state 8
	'>'            reduce using rule 5
	%eof           reduce using rule 5


State 6

	%start_pListExpT -> ListExpT .                      (rule 1)

	%eof           accept


State 7

	%start_pExpT -> ExpT .                              (rule 0)

	%eof           accept


State 8

	ListExpT -> ExpT ',' . ListExpT                     (rule 6)

	L_doubl        shift, and enter state 3

	Double         goto state 4
	ExpT           goto state 5
	ListExpT       goto state 11

State 9

	ExpT -> Double '<' . ListExpT '>'                   (rule 3)

	L_doubl        shift, and enter state 3

	Double         goto state 4
	ExpT           goto state 5
	ListExpT       goto state 10

State 10

	ExpT -> Double '<' ListExpT . '>'                   (rule 3)

	'>'            shift, and enter state 12


State 11

	ListExpT -> ExpT ',' ListExpT .                     (rule 6)

	'>'            reduce using rule 6
	%eof           reduce using rule 6


State 12

	ExpT -> Double '<' ListExpT '>' .                   (rule 3)

	','            reduce using rule 3
	'>'            reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 4
Number of non-terminals: 5
Number of states: 13
