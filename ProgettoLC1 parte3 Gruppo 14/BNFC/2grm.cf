comment "//";
comment "/*" "*/";
entrypoints Program;

Progr.	Program ::= [Stmt];

token Id (letter (letter | digit | '_' )*'$'?);
separator nonempty Id ",";

rules Boolean ::= "true" | "false" ;
token LInt digit+;
token LReal (((digit?) '.'digit+)(('e'|'E') ('-')? digit+)?)| (digit+ ('.')?('e'|'E')('-')? digit+);
rules LString ::= Char | String;
rules LRange ::= Exp ".." Exp ;
rules LArray ::= "[" [Exp] "]" | "[" [Exp] "]" TypeSpec  ;
separator  nonempty Exp ",";

VarDeclS.	Var_Decl_stmt ::= Parameter [Var_Decl] ";" ;
rules Parameter ::= "const" | "ref" | "value" | "var" ;
separator nonempty Var_Decl ",";

VarDecTI.	Var_Decl ::= [Id] Type_part Init_part;
VarDecI.	Var_Decl ::= [Id] Init_part;
VarDec.		Var_Decl ::= [Id] Type_part;

rules TypeSpec ::= "int"| "real" | "bool" | "string" | "char" | "void" ;

TAss.	Type_part ::= ":" TypeSpec;
Init.	Init_part ::= "=" Exp;

Parens.	Paren_exp ::= "(" Exp ")";
CasT.	Cast_exp ::= Exp ":" TypeSpec;

rules LValue_exp ::= Id | Call_exp | Paren_exp;

FunCall.	Call_exp ::= LValue_exp "(" [Named_exp] ")";

separator nonempty Named_exp ",";
rules Named_exp ::= Exp | Id "=" Exp ;

UnaryE.	Unary_exp ::= Unary_op Exp;
Plus.	Unary_op ::= "+";
Neg.	Unary_op ::= "-";
LNeg.	Unary_op ::= "!";

EIf.		Exp ::= IF_exp;
rules IF_exp ::= "if" Exp "then" Exp "else" Exp | "If" Exp "then" Exp;

EFor.		Exp ::= For_exp;
rules For_exp ::= "for" Id "in" Exp "do" Exp | "for" Exp "do" Exp;

SOr.		Exp  ::= Exp "||" Exp1;

SAnd.		Exp1 ::= Exp1 "&&" Exp2;
Eq.		Exp2 ::= Exp3 "==" Exp3;

Neq.		Exp2 ::= Exp3 "!=" Exp3;

Gt.		Exp4 ::= Exp5 ">" Exp5;
GtE.		Exp4 ::= Exp5 ">=" Exp5;
Lt.		Exp4 ::= Exp5 "<" Exp5;
LtE.		Exp4 ::= Exp5 "<=" Exp5;

Add.		Exp6 ::= Exp6 "+" Exp7;
Sub.		Exp6 ::= Exp6 "-" Exp7;

Or.		Exp7 ::= Exp7 "|" Exp8;
Xor.		Exp8 ::= Exp8 "^" Exp9;
And.		Exp9 ::= Exp9 "&" Exp10;
EUnary.		Exp10 ::= Unary_exp;

Mul.		Exp11 ::= Exp11 "*" Exp12;
Div.		Exp11 ::= Exp11 "/" Exp12;
Mod.		Exp11 ::= Exp11 "%" Exp12;

Not.		Exp12 ::= "!" Exp13 
Pow.		Exp13 ::= Exp14 "**" Exp13;

Cast.		Exp15 ::= Cast_exp;
Fcall.		Exp16 ::= Call_exp;

ELiteral.	Exp17 ::= Literal_exp ;
rules Literal_exp ::= Boolean | LInt | LReal | LString | LRange | LArray ;

ELValue.	Exp17 ::= LValue_exp;

coercions Exp 17;

SBlock.		Stmt ::= Block_stmt;
SAssign.	Stmt ::= Assign_stmt;
SIO.		Stmt ::= IO_stmt;
SCondit.	Stmt ::= Cond_stmt;
SWhileDo.	Stmt ::= While_stmt;
SDoWhile.	Stmt ::= Do_stmt;
SFor.		Stmt ::= For_stmt;
SBreak.		Stmt ::= Break_stmt;
SContinue.	Stmt ::= Continue_stmt;
SReturn.	Stmt ::= Return_stmt;
SProcDecl.	Stmt ::= Proc_Decl_stmt;
SVarDecl.	Stmt ::= Var_Decl_stmt;
STryCatch.	Stmt ::= TryCatch_stmt;

BlockS.	Block_stmt ::= "{" [Stmt] "}";

separator Stmt "" ;

TryCatch.	TryCatch_stmt ::= "try" Stmt "catch" Stmt ; 

AssignS.	Assign_stmt ::= LValue_exp Assignment_op Exp; 

Assign.		Assignment_op ::= "=" ;
AssgnAdd.	Assignment_op ::= "+=" ;
AssgnSub.	Assignment_op ::= "-=" ;
AssgnMul.	Assignment_op ::= "*=" ;
AssgnDiv.	Assignment_op ::= "/=" ;
AssgnMod.	Assignment_op ::= "%=" ;
AssgnPow.	Assignment_op ::= "**=" ;
AssgnAnd.	Assignment_op ::= "&=" ;
AssgnOr.	Assignment_op ::= "|=" ;
AssgnXor.	Assignment_op ::= "^=" ;

WriteI.		IO_stmt ::= "writeInt" ;
ReadI.		IO_stmt ::= "readInt" ;
WriteR.		IO_stmt ::= "writeReal" ;
WriteC.		IO_stmt ::= "writeChar";
ReadC.		IO_stmt ::= "readChar";
WriteS.		IO_stmt ::= "writeString";
ReadS.		IO_stmt ::= "readString";

CondNoElseS.	Cond_stmt ::= "if" Exp "then" Stmt;
CondElseS.	Cond_stmt ::= "if" Exp "then" Stmt "else" Stmt;
CondNoElBlS.	Cond_stmt ::= "if" Exp  Block_stmt;
CondElBlS.	Cond_stmt ::= "if" Exp  Block_stmt "else" Stmt;

WhileDo.	While_stmt ::= "while" Exp "do" Stmt;
While.		While_stmt ::= "while" Exp Block_stmt;

DoWhile.	Do_stmt ::= "do" Stmt "while" Exp;

ForInDo.	For_stmt ::= "for" Id "in" Exp "do" Stmt;
ForIn.		For_stmt ::= "for" Id "in" Exp Block_stmt;
ForDo.		For_stmt ::= "for" Exp "do" Stmt;
For.		For_stmt ::= "for" Exp Block_stmt;

rules Break_stmt ::= "break" ";" | "break" Id ";" ;
rules Continue_stmt ::= "continue" ";" | "continue" Id ";";
rules Return_stmt ::= "return" ";" | "return" Exp ";" ;


ProcDef.	Proc_Decl_stmt ::= "proc" Id Func_body;
ProcDefArg.	Proc_Decl_stmt ::= "proc" Id Arg_list Func_body;
ProcDefPar.	Proc_Decl_stmt ::= "proc" Id Parameter Func_body;
ProcDefRet.	Proc_Decl_stmt ::= "proc" Id Ret_type  Func_body;
ProcDefArP.	Proc_Decl_stmt ::= "proc" Id Arg_list Parameter Func_body;
ProcDefArR.	Proc_Decl_stmt ::= "proc" Id Arg_list Ret_type Func_body;
ProcDefAPR.	Proc_Decl_stmt ::= "proc" Id Arg_list Parameter Ret_type Func_body;

ArgumentLst.	Arg_list ::= "(" [Formal] ")";
separator Formal ",";

rules Formal ::= Id 
		| Parameter Id 
		| Id Type_part 
		| Id Init_part 
		| Id Type_part Init_part 
		| Parameter Id Type_part
		| Parameter Id Type_part Init_part ;

rules Ret_type ::= Type_part ;

rules Func_body ::= Block_stmt | Return_stmt ;
