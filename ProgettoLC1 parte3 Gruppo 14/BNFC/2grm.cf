comment "//";
comment "/*" "*/";
entrypoints Program;

coercions Exp 17;
separator Exp ",";

Or.		Exp  ::= Exp "||" Exp1;
And.		Exp1 ::= Exp1 "&&" Exp2;
Not.		Exp2 ::= "!" Exp3 ;

Eq.		Exp5 ::= Exp6 "==" Exp6;
Neq.		Exp5 ::= Exp6 "!=" Exp6;
Gt.		Exp5 ::= Exp6 ">"  Exp6;
GtE.		Exp5 ::= Exp6 ">=" Exp6;
Lt.		Exp5 ::= Exp6 "<"  Exp6;
LtE.		Exp5 ::= Exp6 "<=" Exp6;

Range.		Exp7 ::= Exp8 ".." Exp8;

Add.		Exp9 ::= Exp9 "+" Exp10;
Sub.		Exp9 ::= Exp9 "-" Exp10;

Mul.		Exp10 ::= Exp10 "*" Exp11;
Div.		Exp10 ::= Exp10 "/" Exp11;
Mod.		Exp10 ::= Exp10 "%" Exp11;

Pow.		Exp11 ::= Exp12 "**" Exp11;

Neg.		Exp13 ::= "-" Exp17;

Cast.		Exp15 ::= Exp ":" TypeSpec;

ELiteral.	Exp16 ::= Constant ;

ELValue.	Exp17 ::= LValue_exp;

rules Constant ::= Boolean | Integer | LReal | LString | LArray ;

token Id (letter (letter | digit | '_' )*'$'?);
separator nonempty Id ",";

rules Boolean ::= "true" | "false" ;
token LReal (((digit?) '.'digit+)(('e'|'E') ('-')? digit+)?)| (digit+ ('.')?('e'|'E')('-')? digit+);
rules LString ::= Char | String;
rules LArray ::= "[" [Exp] "]" | "[" [Exp] "]" TypeSpec  ;

rules TypeSpec ::= "int"| "real" | "bool" | "string" | "char" | "void" ;

Progr.	Program ::= [Stmt];

SBlock.		Stmt ::= Block_stmt;
SAssign.	Stmt ::= LValue_exp Assignment_op Exp;
SIO.		Stmt ::= IO_stmt;
SCondit.	Stmt ::= Cond_stmt;
SWhileDo.	Stmt ::= While_stmt;
SDoWhile.	Stmt ::= Do_stmt;
SFor.		Stmt ::= For_stmt;
SBreak.		Stmt ::= Break_stmt ";";
SContinue.	Stmt ::= Continue_stmt ";";
SReturn.	Stmt ::= Return_stmt ";";
SProcDecl.	Stmt ::= Proc_Decl_stmt;
SVarDecl.	Stmt ::= Var_Decl_stmt ";";
STryCatch.	Stmt ::= TryCatch_stmt;

BlockS.	Block_stmt ::= "{" [Stmt] "}";

rules LValue_exp ::= Id | Id "(" [Named_exp] ")" ;
separator nonempty Named_exp ",";
rules Named_exp ::= Exp | Id "=" Exp ;

separator Stmt "" ;

VarDeclS.	Var_Decl_stmt ::= Parameter [Var_Decl] ;
rules Parameter ::= "const" | "ref" | "value" | "var" ;
separator nonempty Var_Decl ",";

VarDecTI.	Var_Decl ::= [Id] Type_part Init_part;
VarDecI.	Var_Decl ::= [Id] Init_part;
VarDec.		Var_Decl ::= [Id] Type_part;

TAss.		Type_part ::= ":" TypeSpec;
Init.		Init_part ::= "=" Exp;

TryCatch.	TryCatch_stmt ::= "try" Stmt "catch" Stmt ; 

Assign.		Assignment_op ::= "=" ;
AssgnAdd.	Assignment_op ::= "+=" ;
AssgnSub.	Assignment_op ::= "-=" ;
AssgnMul.	Assignment_op ::= "*=" ;
AssgnDiv.	Assignment_op ::= "/=" ;
AssgnMod.	Assignment_op ::= "%=" ;
AssgnPow.	Assignment_op ::= "**=" ;
AssgnAnd.	Assignment_op ::= "&=" ;
AssgnOr.	Assignment_op ::= "|=" ;
AssgnXor.	Assignment_op ::= "^=" ;

WriteI.		IO_stmt ::= "writeInt" ;
ReadI.		IO_stmt ::= "readInt" ;
WriteR.		IO_stmt ::= "writeReal" ;
WriteC.		IO_stmt ::= "writeChar";
ReadC.		IO_stmt ::= "readChar";
WriteS.		IO_stmt ::= "writeString";
ReadS.		IO_stmt ::= "readString";

CondNoElseS.	Cond_stmt ::= "if" Exp "then" Stmt;
CondElseS.	Cond_stmt ::= "if" Exp "then" Stmt "else" Stmt;
CondNoElBlS.	Cond_stmt ::= "if" Exp  Block_stmt;
CondElBlS.	Cond_stmt ::= "if" Exp  Block_stmt "else" Stmt;

WhileDo.	While_stmt ::= "while" Exp "do" Stmt;
While.		While_stmt ::= "while" Exp Block_stmt;

DoWhile.	Do_stmt ::= "do" Stmt "while" Exp;

ForInDo.	For_stmt ::= "for" Id "in" Exp "do" Stmt;
ForIn.		For_stmt ::= "for" Id "in" Exp Block_stmt;
ForDo.		For_stmt ::= "for" Exp "do" Stmt;
For.		For_stmt ::= "for" Exp Block_stmt;

rules Break_stmt ::= "break" | "break" Id ;
rules Continue_stmt ::= "continue" | "continue" Id ;
rules Return_stmt ::= "return" | "return" Exp ;


ProcDef.	Proc_Decl_stmt ::= "proc" Id Func_body;
ProcDefArg.	Proc_Decl_stmt ::= "proc" Id Arg_list Func_body;
ProcDefPar.	Proc_Decl_stmt ::= "proc" Id Parameter Func_body;
ProcDefRet.	Proc_Decl_stmt ::= "proc" Id Ret_type  Func_body;
ProcDefArP.	Proc_Decl_stmt ::= "proc" Id Arg_list Parameter Func_body;
ProcDefArR.	Proc_Decl_stmt ::= "proc" Id Arg_list Ret_type Func_body;
ProcDefAPR.	Proc_Decl_stmt ::= "proc" Id Arg_list Parameter Ret_type Func_body;

ArgumentLst.	Arg_list ::= "(" [Formal] ")";
separator Formal ",";

rules Formal ::= Id 
		| Parameter Id 
		| Id Type_part 
		| Id Init_part 
		| Id Type_part Init_part 
		| Parameter Id Type_part
		| Parameter Id Type_part Init_part ;

rules Ret_type ::= Type_part ;

rules Func_body ::= Block_stmt | Return_stmt ;
