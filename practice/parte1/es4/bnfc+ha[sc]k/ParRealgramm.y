-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParRealgramm where
import Absgramm
import LexRealgramm
import ErrM

}

%name pExpT ExpT
%name pListExpT ListExpT
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  ',' { PT _ (TS _ 1) }
  '<' { PT _ (TS _ 2) }
  '>' { PT _ (TS _ 3) }

L_doubl  { PT _ (TD $$) }


%%

Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }

ExpT :: { ExpT }
ExpT : Double '<' ListExpT '>' { Absgramm.Node $1 $3 }
     | Double { Absgramm.Leaf $1 }
ListExpT :: { [ExpT] }
ListExpT : ExpT { (:[]) $1 }
         | ExpT ',' ListExpT { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

