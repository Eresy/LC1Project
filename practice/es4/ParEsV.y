-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParEsV where
import AbsEsV
import LexEsV
import ErrM

}

%name pExp Exp
%name pExpI ExpI
%name pExpF ExpF
%name pListExpI ListExpI
%name pListExpF ListExpF
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  ',' { PT _ (TS _ 1) }
  '<' { PT _ (TS _ 2) }
  '>' { PT _ (TS _ 3) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }

Exp :: { Exp }
Exp : ExpI { AbsEsV.IorF $1 } | ExpF { AbsEsV.ForI $1 }
ExpI :: { ExpI }
ExpI : Integer '<' ListExpI '>' { AbsEsV.ITree $1 $3 }
     | Integer { AbsEsV.ILeaf $1 }
ExpF :: { ExpF }
ExpF : Double '<' ListExpF '>' { AbsEsV.FTree $1 $3 }
     | Double { AbsEsV.FLeaf $1 }
ListExpI :: { [ExpI] }
ListExpI : {- empty -} { [] }
         | ExpI { (:[]) $1 }
         | ExpI ',' ListExpI { (:) $1 $3 }
ListExpF :: { [ExpF] }
ListExpF : {- empty -} { [] }
         | ExpF { (:[]) $1 }
         | ExpF ',' ListExpF { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

