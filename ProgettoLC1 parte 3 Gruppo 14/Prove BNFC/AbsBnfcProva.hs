

module AbsBnfcProva where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data S
  deriving (Eq, Ord, Show, Read)

data TopStatements
  deriving (Eq, Ord, Show, Read)

data TopStatement
  deriving (Eq, Ord, Show, Read)

data Statements
  deriving (Eq, Ord, Show, Read)

data Statement
  deriving (Eq, Ord, Show, Read)

data Assignment
  deriving (Eq, Ord, Show, Read)

data Definition
    = Def TypeLabel LValue
    | Def2 TypeLabel Assignment
    | Def3 FunctionDef
  deriving (Eq, Ord, Show, Read)

data FunctionDef = FDef TypeLabel Label Arguments Instructions
  deriving (Eq, Ord, Show, Read)

data LValue = Lval Label | Lval2 Label Array | Lval3 Pointer Array
  deriving (Eq, Ord, Show, Read)

data RValue
    = Rval LValue
    | Rval2 Type
    | Rval3 Assignment
    | Rval4 FunctionCall
    | Rval5 ArrayDef
    | Rval6 Expression
  deriving (Eq, Ord, Show, Read)

data Type
  deriving (Eq, Ord, Show, Read)

data Bool
  deriving (Eq, Ord, Show, Read)

data TypeLabel
  deriving (Eq, Ord, Show, Read)

data Instructions
  deriving (Eq, Ord, Show, Read)

data Instruction
  deriving (Eq, Ord, Show, Read)

data FunctionCall
  deriving (Eq, Ord, Show, Read)

data Parameters
  deriving (Eq, Ord, Show, Read)

data Arguments
  deriving (Eq, Ord, Show, Read)

data FlowControl
  deriving (Eq, Ord, Show, Read)

data IfThenElse
  deriving (Eq, Ord, Show, Read)

data Then
  deriving (Eq, Ord, Show, Read)

data Else
  deriving (Eq, Ord, Show, Read)

data While
  deriving (Eq, Ord, Show, Read)

data For
  deriving (Eq, Ord, Show, Read)

data ForInd
  deriving (Eq, Ord, Show, Read)

data ForVars
  deriving (Eq, Ord, Show, Read)

data ForVar
  deriving (Eq, Ord, Show, Read)

data Label
  deriving (Eq, Ord, Show, Read)

data Array
  deriving (Eq, Ord, Show, Read)

data ArrayDef = Adef ArrayItems
  deriving (Eq, Ord, Show, Read)

data ArrayItems = Aitm RValue | Aitm2 RValue ArrayItems
  deriving (Eq, Ord, Show, Read)

data Pointer
  deriving (Eq, Ord, Show, Read)

data Expression
  deriving (Eq, Ord, Show, Read)

data Operand
  deriving (Eq, Ord, Show, Read)

data Operator
  deriving (Eq, Ord, Show, Read)

